# 1) Carpetas base
mkdir -p .github/workflows .devcontainer

# 2) Devcontainer (asegura Node 20 y abre puerto 8080)
cat > .devcontainer/devcontainer.json <<'EOF'
{
  "name": "Node 20 API",
  "image": "mcr.microsoft.com/devcontainers/javascript-node:20",
  "postCreateCommand": "npm i || true",
  "forwardPorts": [8080],
  "portsAttributes": { "8080": { "label": "API" } }
}
EOF

# 3) package.json
cat > package.json <<'EOF'
{
  "name": "pricing-api",
  "version": "1.0.0",
  "main": "server.js",
  "type": "module",
  "scripts": { "start": "node server.js" },
  "dependencies": {
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "pg": "^8.11.5"
  }
}
EOF

# 4) API mínima (Express + Postgres)
cat > server.js <<'EOF'
import express from "express";
import dotenv from "dotenv";
import pkg from "pg";
const { Pool } = pkg;

dotenv.config();

const app = express();
const port = process.env.PORT || 8080;

// Conexión Postgres (Neon hoy; IBM Postgres mañana)
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

app.get("/health", (req, res) => res.json({ ok: true }));

app.get("/db/seed", async (req, res) => {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS items(
      id SERIAL PRIMARY KEY,
      name TEXT
    );
    INSERT INTO items(name) VALUES ('Hola desde Postgres');
  `);
  res.json({ seeded: true });
});

app.get("/items", async (req, res) => {
  const { rows } = await pool.query("SELECT * FROM items ORDER BY id");
  res.json(rows);
});

app.listen(port, () => console.log(\`API listening on :\${port}\`));
EOF

# 5) Variables de entorno de ejemplo (no subas tu .env real)
cat > .env.example <<'EOF'
DATABASE_URL=postgres://usuario:password@host:5432/dbname?sslmode=require
EOF

# 6) Dockerfile para construir imagen portable
cat > Dockerfile <<'EOF'
FROM node:20-alpine
WORKDIR /app
COPY package.json package-lock.json* ./
RUN npm ci || npm i
COPY . .
EXPOSE 8080
CMD ["npm","start"]
EOF

# 7) Workflow CI para publicar imagen en GHCR (quedará para más adelante)
cat > .github/workflows/build.yml <<'EOF'
name: build-and-push
on: [push]
permissions:
  contents: read
  packages: write
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/pricing-api:latest
EOF

# 8) .gitignore (si no lo agregaste al crear el repo)
cat > .gitignore <<'EOF'
node_modules
.env
.DS_Store
EOF

# 9) README mínimo
cat > README.md <<'EOF'
# Cloud Portable Pricing API
- API Node/Express + Postgres
- Dev 100% en el navegador (GitHub Codespaces)
- Contenedor portable (GHCR → IBM Cloud Code Engine)
EOF
